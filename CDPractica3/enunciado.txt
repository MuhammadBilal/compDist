Se pide diseñar una aplicación distribuida que implemente un sistema 
de mensajería instantánea. El servidor aceptará conexiones de 
múltiples clientes y, cada vez que se conecte uno nuevo, deberá 
notificar al resto de clientes conectados que pertenezcan al grupo de 
amigos del recién conectado de su presencia. Asimismo, deberá de 
permitir, mediante una conexión a una página web u otro mecanismo 
equivalente, darse de alta y/o baja en el servicio y modificar la clave 
de acceso. Se deberá de suministrar un mecanismo de búsqueda de 
personas registradas y el envío de una petición para formar parte de 
su círculo de amistades.
 
El cliente cuando se active notificará al servidor de su presencia. 
Asimismo, obtendrá la lista de amigos pertenecientes a su grupo de 
amigos que se encuentran conectados y si, posteriormente un nuevo amigo 
se conectase, recibirá notificación de dicha situación en tiempo 
real.
 
Por último, deberá de estar preparado para el posible envío y 
recepción de datos a cualquier persona conectada que pertenezca a su 
grupo de amigos.
La práctica se valorará según el siguiente esquema:
a) Un servidor aceptando conexiones de múltiples clientes, donde todos 
son amigos entre sí. No hay clave de acceso de los clientes (5 puntos).
b) Un servidor aceptando conexiones de múltiples clientes, en donde hay 
grupos de amigos definidos de forma estática. La clave de acceso al 
sistema deberá de poder ser modificada por el cliente (2 puntos).
c) Un servidor aceptando conexiones de múltiples clientes, en donde hay 
grupos de amigos definidos de forma dinámica (para ello será necesaria 
una base de datos que contenga todos los usuarios, la lista de sus 
amigos y su clave de acceso). Para insertar nuevos usuarios en la base 
de datos será necesaria una página web u otro mecanismo equivalente 
que nos pida el nombre de usuario y clave de acceso. Asimismo, deberá 
de haber un mecanismo que permita añadir desde el cliente un nuevo 
amigo en caso de conocer su nombre de usuario (2 puntos).
d) Implementación con CORBA usando C/C++ en el servidor y Java en el 
cliente (1 punto).
 
Puede usarse lenguaje de programación Java y/o C++ y como midleware 
Java RMI o CORBA, si bien se valorará positivamente el uso de CORBA y 
C/C++ para el servidor y Java para el cliente.
 
Se sobreentiende que el cliente debe de tener una interfaz gráfica con 
una funcionalidad mínima.
